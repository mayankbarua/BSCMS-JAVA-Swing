/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdministrativeRole;

import Business.Hospital.BloodDetails;
import Business.Hospital.Hospital;
import Business.Network;
import Business.Organization.Organization;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author barua
 */
public class PieChartPanel extends javax.swing.JPanel {

    /**
     * Creates new form PieChartPanel
     */
    private JPanel userProcessContainer;
    private Network network;
    private Hospital hospital;
    private Organization organization;
    public PieChartPanel(JPanel userProcessContainer, Network network, Organization organization, Hospital hospital) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.network=network;
        this.hospital = hospital;
        this.organization = organization;
        displayPieChart();
    }

    public void displayPieChart()
    {
        int oPoistiveCount=0, oNegativeCount=0, aPoistiveCount=0, aNegativeCount=0, bPoistiveCount=0, bNegativeCount=0, abPoistiveCount=0, abNegativeCount=0;
        for(BloodDetails bloodDetails : hospital.getInventory().getBloodDetailsDirectory().getBloodDetailsDirectory())
        {
            if(bloodDetails.getBloodGroup().equals("O+ve"))
            {
                oPoistiveCount++;
            }
            if(bloodDetails.getBloodGroup().equals("O-ve"))
            {
                oNegativeCount++;
            }
            if(bloodDetails.getBloodGroup().equals("B+ve"))
            {
                bPoistiveCount++;
            }
            if(bloodDetails.getBloodGroup().equals("B-ve"))
            {
                bNegativeCount++;
            }
            if(bloodDetails.getBloodGroup().equals("A+ve"))
            {
                aPoistiveCount++;
            }
            if(bloodDetails.getBloodGroup().equals("A-ve"))
            {
                aNegativeCount++;
            }
            if(bloodDetails.getBloodGroup().equals("AB+ve"))
            {
                abPoistiveCount++;
            }
            if(bloodDetails.getBloodGroup().equals("AB-ve"))
            {
                abNegativeCount--;
            }
        }
        
        DefaultPieDataset pieDataSet = new DefaultPieDataset();
        pieDataSet.setValue("O+ve", new Integer(oPoistiveCount));
        pieDataSet.setValue("O-ve", new Integer(oNegativeCount));
        pieDataSet.setValue("A+ve", new Integer(aPoistiveCount));
        pieDataSet.setValue("A-ve", new Integer(aNegativeCount));
        pieDataSet.setValue("B+ve", new Integer(bPoistiveCount));
        pieDataSet.setValue("B-ve", new Integer(bNegativeCount));
        pieDataSet.setValue("AB+ve", new Integer(abPoistiveCount));
        pieDataSet.setValue("AB-ve", new Integer(abNegativeCount));
        JFreeChart chart = ChartFactory.createPieChart("Blood Stock", pieDataSet, true, true, true);
        PiePlot piePlot =  (PiePlot) chart.getPlot();
        ChartPanel panel = new ChartPanel(chart);
        panel.setSize(450, 500);
        displayPieChartPanel.add(panel);
        DefaultTableModel defaultTableModel = (DefaultTableModel)bloodStockTable.getModel();
        defaultTableModel.setValueAt(oPoistiveCount, 0, 1);
        defaultTableModel.setValueAt(oNegativeCount, 1, 1);
        defaultTableModel.setValueAt(aPoistiveCount, 2, 1);
        defaultTableModel.setValueAt(aNegativeCount, 3, 1);
        defaultTableModel.setValueAt(bPoistiveCount, 4, 1);
        defaultTableModel.setValueAt(bNegativeCount, 5 ,1);
        defaultTableModel.setValueAt(abPoistiveCount,6 ,1);
        defaultTableModel.setValueAt(abNegativeCount,7 ,1);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayPieChartPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bloodStockTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout displayPieChartPanelLayout = new javax.swing.GroupLayout(displayPieChartPanel);
        displayPieChartPanel.setLayout(displayPieChartPanelLayout);
        displayPieChartPanelLayout.setHorizontalGroup(
            displayPieChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        displayPieChartPanelLayout.setVerticalGroup(
            displayPieChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
        );

        add(displayPieChartPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(96, 72, -1, -1));

        bloodStockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"O +ve", null},
                {"O -ve", null},
                {"A +ve", null},
                {"A -ve", null},
                {"B +ve", null},
                {"B -ve", null},
                {"AB +ve", null},
                {"AB -ve", null}
            },
            new String [] {
                "Blood Group", "Availability"
            }
        ));
        jScrollPane1.setViewportView(bloodStockTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(608, 273, 304, 160));

        backButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16/Knob-Fast-Rewind-icon.png"))); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(837, 41, -1, -1));

        jLabel1.setFont(new java.awt.Font("Cambria", 3, 36)); // NOI18N
        jLabel1.setText("Stock Availabilty");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(637, 148, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/watermark_1.PNG"))); // NOI18N
        jLabel2.setText("jLabel2");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1250, 630));
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.remove(this);
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTable bloodStockTable;
    private javax.swing.JPanel displayPieChartPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
